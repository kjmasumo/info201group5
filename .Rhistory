introduction
}
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Fellowship of the Ring", "Way of Kings", "The Rithmatist", "Shazam", "The Eye of the World", "Elantris" )
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
remove_book <- function(book_titles,index_number){
books <- book_titles[index_number * -1]
books
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[100]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers)) ] # checks if the square root of a number is a whole number and keeps those squares in the list
print(squares)
#################
#### PART 4 #####
#################
summer_break <- as.Date("9jun18", "%d%b%y")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
make_birthday_intro <- function(name, age, date_mmddyy){
birthdate <- as.Date(date_mmddyy, "%d%m%y")
days_left_bd <- (birthdate -today)
days_to_bd <- as.double(days_left_bd, units = "days")
intro <- make_introduction(name,age)
birthday_intro <- paste(intro, "In",days_to_bd, "days I'll be", age +1, "." )
birthday_intro
}
make_birthday_intro(my_name,my_age, "09/21/18")
print(make_birthday_intro)
#install.packages("stringr")
library(stringr)
#################
#### PART 1 #####
#################
my_age <- 19
my_name <- "Samuel"
make_introduction <- function(name, age){
introduction <- paste("Hello, my name is ", name, " and I'm ", age, " years old.")
introduction
}
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Fellowship of the Ring", "Way of Kings", "The Rithmatist", "Shazam", "The Eye of the World", "Elantris" )
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
remove_book <- function(book_titles,index_number){
books <- book_titles[index_number * -1]
books
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[100]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers)) ] # checks if the square root of a number is a whole number and keeps those squares in the list
print(squares)
#################
#### PART 4 #####
#################
summer_break <- as.Date("9jun18", "%d%b%y")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
make_birthday_intro <- function(name, age, date_mmddyy){
birthdate <- as.Date(date_mmddyy, "%d%m%y")
days_left_bd <- (birthdate -today)
days_to_bd <- format(days_left_bd)
intro <- make_introduction(name,age)
birthday_intro <- paste(intro, "In",days_to_bd, "days I'll be", age +1, "." )
birthday_intro
}
make_birthday_intro(my_name,my_age, "09/21/18")
print(make_birthday_intro)
#install.packages("stringr")
library(stringr)
#################
#### PART 1 #####
#################
my_age <- 19
my_name <- "Samuel"
make_introduction <- function(name, age){
introduction <- paste("Hello, my name is ", name, " and I'm ", age, " years old.")
introduction
}
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Fellowship of the Ring", "Way of Kings", "The Rithmatist", "Shazam", "The Eye of the World", "Elantris" )
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
remove_book <- function(book_titles,index_number){
books <- book_titles[index_number * -1]
books
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[100]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers)) ] # checks if the square root of a number is a whole number and keeps those squares in the list
print(squares)
#################
#### PART 4 #####
#################
summer_break <- as.Date("9jun18", "%d%b%y")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
make_birthday_intro <- function(name, age, date_mmddyy){
birthdate <- as.Date(date_mmddyy, "%d%m%y")
days_to_bd <- (birthdate -today)
intro <- make_introduction(name,age)
birthday_intro <- paste(intro, "In",days_to_bd, "days I'll be", age +1, "." )
birthday_intro
}
make_birthday_intro(my_name,my_age, "09/21/18")
print(make_birthday_intro)
#install.packages("stringr")
library(stringr)
#################
#### PART 1 #####
#################
my_age <- 19
my_name <- "Samuel"
make_introduction <- function(name, age){
introduction <- paste("Hello, my name is ", name, " and I'm ", age, " years old.")
introduction
}
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Fellowship of the Ring", "Way of Kings", "The Rithmatist", "Shazam", "The Eye of the World", "Elantris" )
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
remove_book <- function(book_titles,index_number){
books <- book_titles[index_number * -1]
books
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[100]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers)) ] # checks if the square root of a number is a whole number and keeps those squares in the list
print(squares)
#################
#### PART 4 #####
#################
summer_break <- as.Date("9jun18", "%d%b%y")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
make_birthday_intro <- function(name, age, date_mmddyy){
birthdate <- as.Date(date_mmddyy, "%d%m%y")
days_to_bd <- (birthdate - today)
intro <- make_introduction(name,age)
birthday_intro <- paste(intro, "In",days_to_bd, "days I'll be", age +1, "." )
birthday_intro
}
make_birthday_intro(my_name,my_age, "09/21/18")
print(make_birthday_intro)
shiny::runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
make_request <- function(end_point){
base_uri <- "https://webapi.nhtsa.gov"
response <- GET(paste0(base_uri, end_point))
body <- content(response, "text")
parsed <- fromJSON(body)
final <- parsed$Results
final
}
runApp('C:/Users/White/info201group5')
library("httr")
library("jsonlite")
library("knitr")
library("dplyr")
make_request <- function(end_point){
base_uri <- "https://webapi.nhtsa.gov"
response <- GET(paste0(base_uri, end_point))
body <- content(response, "text")
parsed <- fromJSON(body)
final <- parsed$Results
final
}
# end_point <- "/api/SafetyRatings?format=json"
# years <- make_request(end_point)$ModelYear
server <- function(input, output){
curr_car <- reactive({
model <- input$models
if(!(" " %in% model)){
model <- gsub(" ", "%20", input$models)
}
results <- make_request(paste0(
"/api/SafetyRatings/modelyear/",
input$year,
"/make/",
input$makes,
"/model/",
model,
"?format=json"
))
results$VehicleId[1]
})
output$chosen_vehicle_table <- renderTable({
curr_ID <- curr_car()
results <- make_request(paste0("/api/SafetyRatings/VehicleID/", curr_ID, "?format=json"))
results
})
output$make_choice <- renderUI({
makes <- make_request(paste0("/api/SafetyRatings/modelyear/", input$year, "?format=json"))$Make
selectInput('makes', label = 'Choose a make', choices = makes)
})
output$model_choice <- renderUI({
models <- make_request(paste0("/api/SafetyRatings/modelyear/", input$year, "/make/", input$makes, "?format=json"))$Model
selectInput('models', label = 'Choose a model', choices = models)
})
}
shinyServer(server)
make_request <- function(end_point){
base_uri <- "https://webapi.nhtsa.gov"
response <- GET(paste0(base_uri, end_point))
body <- content(response, "text")
parsed <- fromJSON(body)
final <- parsed$Results
final
}
end_point <- "/api/SafetyRatings?format=json"
years <- make_request(end_point)$ModelYear
ui <- fluidPage(
titlePanel("Car Safety Ratings"),
sidebarLayout(
sidebarPanel(
selectInput(
'year',
label = "Choose a year",
choices = years
),
uiOutput('make_choice'),
uiOutput('model_choice')
),
mainPanel(
tableOutput('chosen_vehicle_table')
)
)
)
shinyUI(ui)
runApp('C:/Users/White/info201group5')
base_uri <- "https://one.nhtsa.gov/webapi"
make_request <- function(end_point){
base_uri <- "https://one.nhtsa.gov/webapi"
response <- GET(paste0(base_uri, end_point))
body <- content(response, "text")
parsed <- fromJSON(body)
final <- parsed$Results
final
}
end_point <- "/api/SafetyRatings?format=json"
years <- make_request(end_point)$ModelYear
end_point2 <-
ui <- fluidPage(
titlePanel("Car Safety Ratings"),
sidebarLayout(
sidebarPanel(
selectInput(
'year',
label = "Choose a year",
choices = years
),
uiOutput('make_choice'),
uiOutput('model_choice')
),
mainPanel(
tableOutput('chosen_vehicle_table')
)
)
)
shinyUI(ui)
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
library("httr")
library("jsonlite")
library("knitr")
library("dplyr")
make_request <- function(end_point){
base_uri <- "https://one.nhtsa.gov/webapi"
response <- GET(paste0(base_uri, end_point))
body <- content(response, "text")
parsed <- fromJSON(body)
final <- parsed$Results
final
}
# end_point <- "/api/SafetyRatings?format=json"
# years <- make_request(end_point)$ModelYear
server <- function(input, output){
curr_car <- reactive({
model <- input$models
if(!(" " %in% model)){
model <- gsub(" ", "%20", input$models)
}
results <- make_request(paste0(
"/api/SafetyRatings/modelyear/",
input$year,
"/make/",
input$makes,
"/model/",
model,
"?format=json"
))
results$VehicleId[1]
})
output$chosen_vehicle_table <- renderTable({
curr_ID <- curr_car()
results <- make_request(paste0("/api/SafetyRatings/VehicleID/", curr_ID, "?format=json"))
results
})
output$make_choice <- renderUI({
makes <- make_request(paste0("/api/SafetyRatings/modelyear/", input$year, "?format=json"))$Make
selectInput('makes', label = 'Choose a make', choices = makes)
})
output$model_choice <- renderUI({
models <- make_request(paste0("/api/SafetyRatings/modelyear/", input$year, "/make/", input$makes, "?format=json"))$Model
selectInput('models', label = 'Choose a model', choices = models)
})
}
shinyServer(server)
make_request <- function(end_point){
base_uri <- "https://one.nhtsa.gov/webapi"
response <- GET(paste0(base_uri, end_point))
body <- content(response, "text")
parsed <- fromJSON(body)
final <- parsed$Results
final
}
end_point <- "/api/SafetyRatings?format=json"
years <- make_request(end_point)$ModelYear
end_point2 <-"/api/CivilPenalties?format=json"
ui <- fluidPage(
titlePanel("Car Safety Ratings"),
sidebarLayout(
sidebarPanel(
selectInput(
'year',
label = "Choose a year",
choices = years
),
uiOutput('make_choice'),
uiOutput('model_choice')
),
mainPanel(
tableOutput('chosen_vehicle_table')
)
)
)
shinyUI(ui)
runApp('C:/Users/White/info201group5')
library("httr")
library("jsonlite")
library("knitr")
library("dplyr")
base_uri <- "https://one.nhtsa.gov/webapi"
end_point2 <-"/api/CivilPenalties?format=json"
response <- GET(paste0(base_uri, end_point2))
body <- content(response, "text")
datum <- fromJSON(body)
View(datum)
datum <- datum$Results
View(Results)
View(datum)
datum <- datum %>%
select(-AgreementDate, -PenaltyReceivedDate)
View(datum)
fee_range <- range(datum$Amount)
unique(datum$Company)
unique(datum$FileNo)
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
MPdatum
MPdatum <- datum %>%
group_by(Company) %>%
summarize(Count = n())# %>%
library(httr)
library(dplyr)
library(knitr)
library(jsonlite)
library(ggplot2)
make_request <- function(end_point){
base_uri <- "https://one.nhtsa.gov/webapi"
response <- GET(paste0(base_uri, end_point))
body <- content(response, "text")
parsed <- fromJSON(body)
final <- parsed$Results
final
}
end_point2 <-"/api/CivilPenalties?format=json"
datum <- make_request(end_point2)
datum <- datum %>%
select(-AgreementDate, -PenaltyReceivedDate)
fee_range <- range(datum$Amount, na.rm = T)
MPdatum <- datum %>%
group_by(Company) %>%
summarize(Count = n())# %>%
#filter(Count == max(Count))
MPdatum
View(MPdatum)
MPdatum <- datum %>%
group_by(Company) %>%
summarize(Count = n()) %>%
filter(Count == max(Count))
MPdatum
shiny::runApp('C:/Users/White/info201group5')
View(MPdatum)
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
shiny::runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
runApp('C:/Users/White/info201group5')
MP$Company
MPdatum$Company
MPdatum[Company,]
MPdatum[,Company]
MPdatum$Company[1]
MPdatum$Company[2]
MPdatum$Company[3] == T
length(MPdatum$Company)
runApp('C:/Users/White/info201group5')
